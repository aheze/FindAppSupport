///A file where miscellaneous code is pasted.



//Bullet point text
//need to convert to Swift 5 and test
func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {
    // If the replacement text is "\n" and the
    // text view is the one you want bullet points
    // for
    if (text == "\n") {
        // If the replacement text is being added to the end of the
        // text view, i.e. the new index is the length of the old
        // text view's text...


        if range.location == textView.text.characters.count {
            // Simply add the newline and bullet point to the end
            var updatedText: String = textView.text!.stringByAppendingString("\n \u{2022} ")
            textView.text = updatedText
        }
        else {

            // Get the replacement range of the UITextView
            var beginning: UITextPosition = textView.beginningOfDocument
            var start: UITextPosition = textView.positionFromPosition(beginning, offset: range.location)!
            var end: UITextPosition = textView.positionFromPosition(start, offset: range.length)!
            var textRange: UITextRange = textView.textRangeFromPosition(start, toPosition: end)!
            // Insert that newline character *and* a bullet point
            // at the point at which the user inputted just the
            // newline character
            textView.replaceRange(textRange, withText: "\n \u{2022} ")
            // Update the cursor position accordingly
            var cursor: NSRange = NSMakeRange(range.location + "\n \u{2022} ".length, 0)
            textView.selectedRange = cursor
        }

        return false


    }
    // Else return yes
    return true
}


///realm

import UIKit
import RealmSwift

class List: Object {
  @objc dynamic var name = ""
  @objc dynamic var description = ""
  @objc dynamic var contents = ""
  @objc dynamic var iconImageName = ""
  //@objc dynamic var created = Date()
}

import RealmSwift
var lists: Results<Item>?
let realm = try! Realm()


class ListBrowserViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
func loadLists() {
    lists = realm.objects(List.self)
    tableView.reloadData()
}

func addNewList(name: String, desc: String, contents: String, iconName: String) {
  
  do {
     try realm.write { // 2
        let newList = List() // 3

        newList.name = name
        newList.description = desc
        newList.contents = contents
        newList.iconImageName = iconName

        realm.add(newList) // 5
        lists.append(newList)
      }
    } catch {
        print("error saving, \(error)")
    }
    tableView.reloadData()
  }
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return lists.count ?? 1
  }
    
}
  
  
  
  
  
  
  
  //MARK: - Search bar methods
extension ListBrowserViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
        lists = lists?.filter("title CONTAINS[cd] %@", searchBar.text!).sorted(byKeyPath: "name", ascending: true)
        
        tableView.reloadData()
        
    }
    
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchBar.text?.count == 0 {
            loadLists()
            
            DispatchQueue.main.async {
                searchBar.resignFirstResponder()
            }
            
        }
    }
}
  
  
  
  
  
}
